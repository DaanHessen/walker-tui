package engine

// Code generated by enumsgen; DO NOT EDIT.

type Trait string

const (
	TraitAnalytical  Trait = "analytical"
	TraitCautious    Trait = "cautious"
	TraitCharismatic Trait = "charismatic"
	TraitDisciplined Trait = "disciplined"
	TraitEmpathetic  Trait = "empathetic"
	TraitFearless    Trait = "fearless"
	TraitHaunted     Trait = "haunted"
	TraitImpulsive   Trait = "impulsive"
	TraitInventive   Trait = "inventive"
	TraitLoner       Trait = "loner"
	TraitMeticulous  Trait = "meticulous"
	TraitObservant   Trait = "observant"
	TraitOptimistic  Trait = "optimistic"
	TraitParanoid    Trait = "paranoid"
	TraitPragmatic   Trait = "pragmatic"
	TraitProtective  Trait = "protective"
	TraitResilient   Trait = "resilient"
	TraitResourceful Trait = "resourceful"
	TraitSteadfast   Trait = "steadfast"
	TraitStoic       Trait = "stoic"
	TraitStreetwise  Trait = "streetwise"
	TraitTactician   Trait = "tactician"
)

var AllTraits = []Trait{TraitAnalytical, TraitCautious, TraitCharismatic, TraitDisciplined, TraitEmpathetic, TraitFearless, TraitHaunted, TraitImpulsive, TraitInventive, TraitLoner, TraitMeticulous, TraitObservant, TraitOptimistic, TraitParanoid, TraitPragmatic, TraitProtective, TraitResilient, TraitResourceful, TraitSteadfast, TraitStoic, TraitStreetwise, TraitTactician}

type Skill string

const (
	SkillAgriculture    Skill = "agriculture"
	SkillAnimalHandling Skill = "animal_handling"
	SkillCombatMelee    Skill = "combat_melee"
	SkillCommunications Skill = "communications"
	SkillCooking        Skill = "cooking"
	SkillCrafting       Skill = "crafting"
	SkillDemolitions    Skill = "demolitions"
	SkillDriving        Skill = "driving"
	SkillElectronics    Skill = "electronics"
	SkillEndurance      Skill = "endurance"
	SkillEngineering    Skill = "engineering"
	SkillFirearms       Skill = "firearms"
	SkillForensics      Skill = "forensics"
	SkillHacking        Skill = "hacking"
	SkillLeadership     Skill = "leadership"
	SkillLogistics      Skill = "logistics"
	SkillMedicine       Skill = "medicine"
	SkillMountaineering Skill = "mountaineering"
	SkillNavigation     Skill = "navigation"
	SkillNegotiation    Skill = "negotiation"
	SkillPerception     Skill = "perception"
	SkillPsychology     Skill = "psychology"
	SkillSailing        Skill = "sailing"
	SkillScavenging     Skill = "scavenging"
	SkillStealth        Skill = "stealth"
	SkillSurvival       Skill = "survival"
	SkillTechnical      Skill = "technical"
)

var AllSkills = []Skill{SkillAgriculture, SkillAnimalHandling, SkillCombatMelee, SkillCommunications, SkillCooking, SkillCrafting, SkillDemolitions, SkillDriving, SkillElectronics, SkillEndurance, SkillEngineering, SkillFirearms, SkillForensics, SkillHacking, SkillLeadership, SkillLogistics, SkillMedicine, SkillMountaineering, SkillNavigation, SkillNegotiation, SkillPerception, SkillPsychology, SkillSailing, SkillScavenging, SkillStealth, SkillSurvival, SkillTechnical}

type Condition string

const (
	ConditionBleeding     Condition = "bleeding"
	ConditionBurns        Condition = "burns"
	ConditionConcussion   Condition = "concussion"
	ConditionDehydration  Condition = "dehydration"
	ConditionExhaustion   Condition = "exhaustion"
	ConditionFever        Condition = "fever"
	ConditionFracture     Condition = "fracture"
	ConditionFrostbite    Condition = "frostbite"
	ConditionHeatstroke   Condition = "heatstroke"
	ConditionHypothermia  Condition = "hypothermia"
	ConditionInfection    Condition = "infection"
	ConditionMalnutrition Condition = "malnutrition"
	ConditionPain         Condition = "pain"
	ConditionPoisoning    Condition = "poisoning"
	ConditionRadiation    Condition = "radiation"
	ConditionSepsis       Condition = "sepsis"
	ConditionShellshock   Condition = "shellshock"
	ConditionSprain       Condition = "sprain"
)

var AllConditions = []Condition{ConditionBleeding, ConditionBurns, ConditionConcussion, ConditionDehydration, ConditionExhaustion, ConditionFever, ConditionFracture, ConditionFrostbite, ConditionHeatstroke, ConditionHypothermia, ConditionInfection, ConditionMalnutrition, ConditionPain, ConditionPoisoning, ConditionRadiation, ConditionSepsis, ConditionShellshock, ConditionSprain}

type Meter string

const (
	MeterCampVisibility    Meter = "camp_visibility"
	MeterColdExposure      Meter = "cold_exposure"
	MeterCustomLastTurn    Meter = "custom_last_turn"
	MeterExhaustionScenes  Meter = "exhaustion_scenes"
	MeterFeverMedication   Meter = "fever_medication"
	MeterFeverRest         Meter = "fever_rest"
	MeterHydrationRecovery Meter = "hydration_recovery"
	MeterInfectionPressure Meter = "infection_pressure"
	MeterLeadershipTrust   Meter = "leadership_trust"
	MeterNoise             Meter = "noise"
	MeterPanicLevel        Meter = "panic_level"
	MeterScent             Meter = "scent"
	MeterSignalStrength    Meter = "signal_strength"
	MeterStealthProfile    Meter = "stealth_profile"
	MeterSupplyOutlook     Meter = "supply_outlook"
	MeterThirstStreak      Meter = "thirst_streak"
	MeterTrust             Meter = "trust"
	MeterVisibility        Meter = "visibility"
	MeterWarmStreak        Meter = "warm_streak"
)

var AllMeters = []Meter{MeterCampVisibility, MeterColdExposure, MeterCustomLastTurn, MeterExhaustionScenes, MeterFeverMedication, MeterFeverRest, MeterHydrationRecovery, MeterInfectionPressure, MeterLeadershipTrust, MeterNoise, MeterPanicLevel, MeterScent, MeterSignalStrength, MeterStealthProfile, MeterSupplyOutlook, MeterThirstStreak, MeterTrust, MeterVisibility, MeterWarmStreak}

type LocationType string

const (
	LocationTypeCanyon        LocationType = "canyon"
	LocationTypeCity          LocationType = "city"
	LocationTypeCoast         LocationType = "coast"
	LocationTypeDesert        LocationType = "desert"
	LocationTypeForest        LocationType = "forest"
	LocationTypeIndustrial    LocationType = "industrial"
	LocationTypeIsland        LocationType = "island"
	LocationTypeMarsh         LocationType = "marsh"
	LocationTypeMegastructure LocationType = "megastructure"
	LocationTypeMountain      LocationType = "mountain"
	LocationTypePlateau       LocationType = "plateau"
	LocationTypeRural         LocationType = "rural"
	LocationTypeSubterranean  LocationType = "subterranean"
	LocationTypeSuburb        LocationType = "suburb"
	LocationTypeTundra        LocationType = "tundra"
)

var AllLocationTypes = []LocationType{LocationTypeCanyon, LocationTypeCity, LocationTypeCoast, LocationTypeDesert, LocationTypeForest, LocationTypeIndustrial, LocationTypeIsland, LocationTypeMarsh, LocationTypeMegastructure, LocationTypeMountain, LocationTypePlateau, LocationTypeRural, LocationTypeSubterranean, LocationTypeSuburb, LocationTypeTundra}

const (
	LocationCanyon        = LocationTypeCanyon
	LocationCity          = LocationTypeCity
	LocationCoast         = LocationTypeCoast
	LocationDesert        = LocationTypeDesert
	LocationForest        = LocationTypeForest
	LocationIndustrial    = LocationTypeIndustrial
	LocationIsland        = LocationTypeIsland
	LocationMarsh         = LocationTypeMarsh
	LocationMegastructure = LocationTypeMegastructure
	LocationMountain      = LocationTypeMountain
	LocationPlateau       = LocationTypePlateau
	LocationRural         = LocationTypeRural
	LocationSubterranean  = LocationTypeSubterranean
	LocationSuburb        = LocationTypeSuburb
	LocationTundra        = LocationTypeTundra
)

type Season string

const (
	SeasonAutumn Season = "autumn"
	SeasonSpring Season = "spring"
	SeasonSummer Season = "summer"
	SeasonWinter Season = "winter"
)

var AllSeasons = []Season{SeasonAutumn, SeasonSpring, SeasonSummer, SeasonWinter}

type Weather string

const (
	WeatherAshfall   Weather = "ashfall"
	WeatherBlizzard  Weather = "blizzard"
	WeatherClear     Weather = "clear"
	WeatherDustStorm Weather = "dust_storm"
	WeatherFog       Weather = "fog"
	WeatherHail      Weather = "hail"
	WeatherHeatwave  Weather = "heatwave"
	WeatherMonsoon   Weather = "monsoon"
	WeatherOvercast  Weather = "overcast"
	WeatherRain      Weather = "rain"
	WeatherSmoke     Weather = "smoke"
	WeatherSnow      Weather = "snow"
	WeatherStorm     Weather = "storm"
)

var AllWeathers = []Weather{WeatherAshfall, WeatherBlizzard, WeatherClear, WeatherDustStorm, WeatherFog, WeatherHail, WeatherHeatwave, WeatherMonsoon, WeatherOvercast, WeatherRain, WeatherSmoke, WeatherSnow, WeatherStorm}

type TempBand string

const (
	TempBandArctic    TempBand = "arctic"
	TempBandCold      TempBand = "cold"
	TempBandFreezing  TempBand = "freezing"
	TempBandHot       TempBand = "hot"
	TempBandMild      TempBand = "mild"
	TempBandScorching TempBand = "scorching"
	TempBandWarm      TempBand = "warm"
)

var AllTempBands = []TempBand{TempBandArctic, TempBandCold, TempBandFreezing, TempBandHot, TempBandMild, TempBandScorching, TempBandWarm}

const (
	TempArctic    = TempBandArctic
	TempCold      = TempBandCold
	TempFreezing  = TempBandFreezing
	TempHot       = TempBandHot
	TempMild      = TempBandMild
	TempScorching = TempBandScorching
	TempWarm      = TempBandWarm
)

type RiskLevel string

const (
	RiskLevelHigh     RiskLevel = "High"
	RiskLevelLow      RiskLevel = "Low"
	RiskLevelModerate RiskLevel = "Moderate"
)

var AllRiskLevels = []RiskLevel{RiskLevelHigh, RiskLevelLow, RiskLevelModerate}

const (
	RiskHigh     = RiskLevelHigh
	RiskLow      = RiskLevelLow
	RiskModerate = RiskLevelModerate
)

type GroupType string

const (
	GroupTypeCommunity      GroupType = "Community"
	GroupTypeConvoy         GroupType = "Convoy"
	GroupTypeDuo            GroupType = "Duo"
	GroupTypeNomadClan      GroupType = "NomadClan"
	GroupTypeReliefColumn   GroupType = "ReliefColumn"
	GroupTypeResearchTeam   GroupType = "ResearchTeam"
	GroupTypeSmallGroup     GroupType = "SmallGroup"
	GroupTypeSolo           GroupType = "Solo"
	GroupTypeTaskForce      GroupType = "TaskForce"
	GroupTypeTradingCaravan GroupType = "TradingCaravan"
)

var AllGroupTypes = []GroupType{GroupTypeCommunity, GroupTypeConvoy, GroupTypeDuo, GroupTypeNomadClan, GroupTypeReliefColumn, GroupTypeResearchTeam, GroupTypeSmallGroup, GroupTypeSolo, GroupTypeTaskForce, GroupTypeTradingCaravan}

const (
	GroupCommunity      = GroupTypeCommunity
	GroupConvoy         = GroupTypeConvoy
	GroupDuo            = GroupTypeDuo
	GroupNomadClan      = GroupTypeNomadClan
	GroupReliefColumn   = GroupTypeReliefColumn
	GroupResearchTeam   = GroupTypeResearchTeam
	GroupSmallGroup     = GroupTypeSmallGroup
	GroupSolo           = GroupTypeSolo
	GroupTaskForce      = GroupTypeTaskForce
	GroupTradingCaravan = GroupTypeTradingCaravan
)

// Generic helpers
func contains[T ~string](list []T, v T) bool {
	for _, x := range list {
		if x == v {
			return true
		}
	}
	return false
}

func (e Trait) Validate() bool { return contains(AllTraits, e) }
func (e Trait) String() string { return string(e) }
func ParseTrait(s string) (Trait, bool) {
	for _, v := range AllTraits {
		if string(v) == s {
			return v, true
		}
	}
	return Trait(""), false
}
func ListTraits() []Trait { return append([]Trait{}, AllTraits...) }

func (e Skill) Validate() bool { return contains(AllSkills, e) }
func (e Skill) String() string { return string(e) }
func ParseSkill(s string) (Skill, bool) {
	for _, v := range AllSkills {
		if string(v) == s {
			return v, true
		}
	}
	return Skill(""), false
}
func ListSkills() []Skill { return append([]Skill{}, AllSkills...) }

func (e Condition) Validate() bool { return contains(AllConditions, e) }
func (e Condition) String() string { return string(e) }
func ParseCondition(s string) (Condition, bool) {
	for _, v := range AllConditions {
		if string(v) == s {
			return v, true
		}
	}
	return Condition(""), false
}
func ListConditions() []Condition { return append([]Condition{}, AllConditions...) }

func (e Meter) Validate() bool { return contains(AllMeters, e) }
func (e Meter) String() string { return string(e) }
func ParseMeter(s string) (Meter, bool) {
	for _, v := range AllMeters {
		if string(v) == s {
			return v, true
		}
	}
	return Meter(""), false
}
func ListMeters() []Meter { return append([]Meter{}, AllMeters...) }

func (e LocationType) Validate() bool { return contains(AllLocationTypes, e) }
func (e LocationType) String() string { return string(e) }
func ParseLocationType(s string) (LocationType, bool) {
	for _, v := range AllLocationTypes {
		if string(v) == s {
			return v, true
		}
	}
	return LocationType(""), false
}
func ListLocationTypes() []LocationType { return append([]LocationType{}, AllLocationTypes...) }

func (e Season) Validate() bool { return contains(AllSeasons, e) }
func (e Season) String() string { return string(e) }
func ParseSeason(s string) (Season, bool) {
	for _, v := range AllSeasons {
		if string(v) == s {
			return v, true
		}
	}
	return Season(""), false
}
func ListSeasons() []Season { return append([]Season{}, AllSeasons...) }

func (e Weather) Validate() bool { return contains(AllWeathers, e) }
func (e Weather) String() string { return string(e) }
func ParseWeather(s string) (Weather, bool) {
	for _, v := range AllWeathers {
		if string(v) == s {
			return v, true
		}
	}
	return Weather(""), false
}
func ListWeathers() []Weather { return append([]Weather{}, AllWeathers...) }

func (e TempBand) Validate() bool { return contains(AllTempBands, e) }
func (e TempBand) String() string { return string(e) }
func ParseTempBand(s string) (TempBand, bool) {
	for _, v := range AllTempBands {
		if string(v) == s {
			return v, true
		}
	}
	return TempBand(""), false
}
func ListTempBands() []TempBand { return append([]TempBand{}, AllTempBands...) }

func (e RiskLevel) Validate() bool { return contains(AllRiskLevels, e) }
func (e RiskLevel) String() string { return string(e) }
func ParseRiskLevel(s string) (RiskLevel, bool) {
	for _, v := range AllRiskLevels {
		if string(v) == s {
			return v, true
		}
	}
	return RiskLevel(""), false
}
func ListRiskLevels() []RiskLevel { return append([]RiskLevel{}, AllRiskLevels...) }

func (e GroupType) Validate() bool { return contains(AllGroupTypes, e) }
func (e GroupType) String() string { return string(e) }
func ParseGroupType(s string) (GroupType, bool) {
	for _, v := range AllGroupTypes {
		if string(v) == s {
			return v, true
		}
	}
	return GroupType(""), false
}
func ListGroupTypes() []GroupType { return append([]GroupType{}, AllGroupTypes...) }
